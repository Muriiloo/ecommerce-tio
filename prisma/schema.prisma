generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  password      String    
  isAdmin       Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt @default(now())

 
  accounts      Account[]
  sessions      Session[]

  
  orders        Order[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id            String         @id @default(uuid())
  name          String
  description   String
  details       String?
  price         Decimal        @db.Decimal(10, 2)
  stockQuantity Int
  size          String?
  color         String?
  imageUrl      String
  createdAt     DateTime       @default(now())
  orderItems    OrderItem[]
  images        ProductImage[]
  category      Category
}

enum Category {
  masculino
  feminino
  infantil
  acess√≥rio
}

model Order {
  id            String      @id @default(uuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  status        OrderStatus
  totalAmount   Decimal     @db.Decimal(10, 2)
  paymentMethod String
  createdAt     DateTime    @default(now())
  items         OrderItem[]
}

model OrderItem {
  id              String  @id @default(uuid())
  orderId         String
  productId       String
  quantity        Int
  priceAtPurchase Decimal @db.Decimal(10, 2)
  selectedSize   String?
  selectedColor  String?

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model ProductImage {
  id        String @id @default(uuid())
  productId String
  imageUrl  String

  product Product @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  pending
  paid
  shipped
  cancelled
}
