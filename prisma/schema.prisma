generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  street       String?
  number       String?
  complement   String?
  neighborhood String?
  city         String?
  state        String?
  zipCode      String?
  phone        String?

  accounts  Account[]
  sessions  Session[]
  addresses Address[]

  orders Order[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id           String   @id @default(uuid())
  userId       String
  name         String // "Casa", "Trabalho", etc.
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  zipCode      String
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]
}

model Product {
  id          String           @id @default(uuid())
  name        String
  description String
  details     String?
  price       Decimal          @db.Decimal(10, 2)
  isFeatured  Boolean          @default(false)
  createdAt   DateTime         @default(now())
  images      ProductImage[]
  category    Category
  variants    ProductVariant[]

  @@index([category])
  @@index([isFeatured])
}

model ProductVariant {
  id              String   @id @default(uuid())
  productId       String
  imageUrl        String?
  size            String?
  shoeSize        Decimal? @db.Decimal(4, 1)
  color           String?
  stockQuantity   Int
  priceAdjustment Decimal  @default(0) @db.Decimal(10, 2)
  sku             String?  @unique

  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@unique([productId, size, shoeSize, color])
  @@index([productId])
}

enum Category {
  masculino
  feminino
  infantil
  acessorio
  calcado
}

enum Size {
  PP
  P
  M
  G
  GG
  XG
}

model Order {
  id            String      @id @default(uuid())
  userId        String
  addressId     String? // Endereço usado no pedido
  status        OrderStatus
  totalAmount   Decimal     @db.Decimal(10, 2)
  paymentMethod String
  createdAt     DateTime    @default(now())

  // Snapshot do endereço no momento do pedido (para preservar histórico)
  deliveryStreet       String?
  deliveryNumber       String?
  deliveryComplement   String?
  deliveryNeighborhood String?
  deliveryCity         String?
  deliveryState        String?
  deliveryZipCode      String?
  deliveryPhone        String?

  user    User        @relation(fields: [userId], references: [id])
  address Address?    @relation(fields: [addressId], references: [id])
  items   OrderItem[]
}

model OrderItem {
  id               String  @id @default(uuid())
  orderId          String
  productVariantId String
  quantity         Int
  priceAtPurchase  Decimal @db.Decimal(10, 2)

  order          Order          @relation(fields: [orderId], references: [id])
  productVariant ProductVariant @relation(fields: [productVariantId], references: [id])

  @@index([orderId])
  @@index([productVariantId])
}

model ProductImage {
  id        String @id @default(uuid())
  productId String
  imageUrl  String

  product Product @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  pending
  paid
  shipped
  cancelled
}
